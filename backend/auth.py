from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY = "your_secret_key"  # –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –±–µ—Ä–∏ –∏–∑ .env
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ‚úÖ –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def get_password_hash(password: str):
    return pwd_context.hash(password)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def verify_password(plain_password: str, hashed_password: str):
    return pwd_context.verify(plain_password, hashed_password)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ JWT-—Ç–æ–∫–µ–Ω–∞
def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
